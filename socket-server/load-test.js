#!/usr/bin/env node

import https from 'https';
import http from 'http';
import { URL } from 'url';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    url: 'http://127.0.0.1/v1/projects/17/chats/1/messages',
    method: 'POST',
    token: '818|CGYHRd2t4Iz7KvSWkMhiKYJC4UvdXcDbFrLL6RlWa32f52c3',
    payload: {
        message: "some chat"
    },
    totalRequests: 200,
    timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
function sendRequest(requestId) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const url = new URL(CONFIG.url);

        const postData = JSON.stringify(CONFIG.payload);

        const options = {
            hostname: url.hostname,
            port: url.port || (url.protocol === 'https:' ? 443 : 80),
            path: url.pathname + url.search,
            method: CONFIG.method,
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData),
                'Authorization': `Bearer ${CONFIG.token}`,
                'User-Agent': `LoadTest-${requestId}`,
                'Accept': 'application/json'
            },
            timeout: CONFIG.timeout
        };

        const client = url.protocol === 'https:' ? https : http;

        const req = client.request(options, (res) => {
            let data = '';

            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                const endTime = Date.now();
                const responseTime = endTime - startTime;

                resolve({
                    requestId,
                    statusCode: res.statusCode,
                    responseTime,
                    success: res.statusCode >= 200 && res.statusCode < 300,
                    dataLength: data.length,
                    response: data.length > 200 ? data.substring(0, 200) + '...' : data
                });
            });
        });

        req.on('error', (error) => {
            const endTime = Date.now();
            const responseTime = endTime - startTime;

            resolve({
                requestId,
                statusCode: 0,
                responseTime,
                success: false,
                error: error.message,
                response: null
            });
        });

        req.on('timeout', () => {
            req.destroy();
            const endTime = Date.now();
            const responseTime = endTime - startTime;

            resolve({
                requestId,
                statusCode: 0,
                responseTime,
                success: false,
                error: 'Request timeout',
                response: null
            });
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        req.write(postData);
        req.end();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async function runLoadTest() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    console.log(`üì° URL: ${CONFIG.url}`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${CONFIG.totalRequests}`);
    console.log(`üíæ Payload: ${JSON.stringify(CONFIG.payload)}`);
    console.log(`üîë Token: ${CONFIG.token.substring(0, 20)}...`);
    console.log('');

    const startTime = Date.now();

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const requests = [];
    for (let i = 1; i <= CONFIG.totalRequests; i++) {
        requests.push(sendRequest(i));
    }

    console.log('‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.all(requests);

    const endTime = Date.now();
    const totalTime = endTime - startTime;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const stats = {
        total: results.length,
        successful: results.filter(r => r.success).length,
        failed: results.filter(r => !r.success).length,
        totalTime: totalTime,
        avgResponseTime: results.reduce((sum, r) => sum + r.responseTime, 0) / results.length,
        minResponseTime: Math.min(...results.map(r => r.responseTime)),
        maxResponseTime: Math.max(...results.map(r => r.responseTime)),
        requestsPerSecond: (results.length / totalTime) * 1000
    };

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞–º
    const statusCodes = {};
    results.forEach(r => {
        const code = r.statusCode || 'ERROR';
        statusCodes[code] = (statusCodes[code] || 0) + 1;
    });

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('='.repeat(50));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.successful} –∏–∑ ${stats.total}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.failed}`);
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${stats.totalTime} –º—Å (${(stats.totalTime/1000).toFixed(2)} —Å–µ–∫)`);
    console.log(`üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${stats.requestsPerSecond.toFixed(2)}`);
    console.log('');
    console.log('‚è∞ –í–†–ï–ú–Ø –û–¢–ö–õ–ò–ö–ê:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${stats.avgResponseTime.toFixed(2)} –º—Å`);
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: ${stats.minResponseTime} –º—Å`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: ${stats.maxResponseTime} –º—Å`);
    console.log('');
    console.log('üìã –°–¢–ê–¢–£–° –ö–û–î–´:');
    Object.entries(statusCodes).forEach(([code, count]) => {
        const emoji = code >= 200 && code < 300 ? '‚úÖ' : code >= 400 ? '‚ùå' : '‚ö†Ô∏è';
        console.log(`   ${emoji} ${code}: ${count} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    const errors = results.filter(r => !r.success);
    if (errors.length > 0) {
        console.log('\nüî¥ –û–®–ò–ë–ö–ò:');
        const errorGroups = {};
        errors.forEach(r => {
            const errorKey = r.error || `HTTP ${r.statusCode}`;
            errorGroups[errorKey] = (errorGroups[errorKey] || 0) + 1;
        });

        Object.entries(errorGroups).forEach(([error, count]) => {
            console.log(`   ‚ùå ${error}: ${count} —Ä–∞–∑`);
        });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    const successfulResponses = results.filter(r => r.success && r.response);
    if (successfulResponses.length > 0) {
        console.log('\n‚úÖ –ü–†–ò–ú–ï–†–´ –£–°–ü–ï–®–ù–´–• –û–¢–í–ï–¢–û–í:');
        successfulResponses.slice(0, 3).forEach((r, i) => {
            console.log(`   ${i + 1}. Request #${r.requestId} (${r.statusCode}): ${r.response}`);
        });
    }

    console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    process.exit(stats.failed > 0 ? 1 : 0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
    console.log('\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    process.exit(1);
});

process.on('unhandledRejection', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runLoadTest().catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞:', error);
    process.exit(1);
});
