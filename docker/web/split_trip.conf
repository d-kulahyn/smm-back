gzip_static on;

upstream node_backend {
    least_conn;

    keepalive 500;
    keepalive_requests 100000;
    keepalive_timeout 60s;

    server split_trip_node:3000 max_fails=3 fail_timeout=10s weight=10 max_conns=2000;
}

upstream nest_backend {
    least_conn;

    keepalive 300;
    keepalive_requests 50000;
    keepalive_timeout 60s;

    server split_trip_nest:3001 max_fails=3 fail_timeout=10s weight=10 max_conns=1500;
}

proxy_cache_path /tmp/nginx_cache levels=1:2:2 keys_zone=static_cache:500m inactive=2h max_size=5g loader_threshold=300 loader_files=200;
proxy_cache_path /tmp/nginx_api_cache levels=1:2 keys_zone=api_cache:100m inactive=15m max_size=1g;

server {
    listen 80 reuseport deferred so_keepalive=on;
    server_name way-pay.net;

    tcp_nodelay on;
    tcp_nopush on;
    sendfile on;
    sendfile_max_chunk 2m;

    client_body_buffer_size 512k;
    client_max_body_size 100m;
    client_header_buffer_size 8k;
    large_client_header_buffers 8 32k;

    client_body_timeout 8s;
    client_header_timeout 8s;
    send_timeout 8s;
    keepalive_timeout 65s;
    keepalive_requests 10000;

    limit_conn perip 5000;
    limit_conn perserver 20000;

    error_log /var/log/nginx/error.log error;

    root /var/www/html/public;
    index index.php;

    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Специальная обработка для всех путей api-docs (включая статические ресурсы)
    location ^~ /api-docs {
        limit_req zone=api burst=1000 nodelay;

        proxy_pass http://nest_backend;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_buffering on;
        proxy_buffer_size 64k;
        proxy_buffers 16 64k;
        proxy_busy_buffers_size 128k;

        # Кеширование для статических ресурсов
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;

        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Credentials true always;

        # Разрешаем кеширование для статических ресурсов swagger
        expires 10m;
        add_header Cache-Control "public, max-age=600" always;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        access_log off;

        try_files $uri =404;

        expires 1y;
        add_header Cache-Control "public, immutable" always;
        add_header Vary Accept-Encoding always;

        gzip_static on;

        limit_req zone=static burst=1000 nodelay;

        etag off;
    }

    location ~* \.json$ {
#         proxy_cache api_cache;
#         proxy_cache_valid 200 302 5m;
#         proxy_cache_valid 404 1m;
#         proxy_cache_key "$request_method$host$request_uri";
#
#         expires 5m;
#         add_header Cache-Control "public" always;
#         add_header Content-Type application/json always;
#         add_header X-Cache-Status $upstream_cache_status always;
#
#         limit_req zone=api burst=500 nodelay;

        try_files $uri =404;
    }

    location ~ ^/\.well-known/(apple-app-site-association|assetlinks\.json)$ {
        access_log off;

        proxy_cache static_cache;
        proxy_cache_valid 200 6h;
        proxy_cache_key "$request_uri";

        try_files $uri =404;
        default_type application/json;

        expires 6h;
        add_header Cache-Control "public, immutable" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Cache-Status $upstream_cache_status always;

        limit_req zone=api burst=100 nodelay;
    }

    location /socket.io/ {
        access_log off;
        error_log /var/log/nginx/socket_error.log error;

        limit_req zone=socket burst=500 nodelay;

        proxy_pass http://node_backend;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 3s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_buffering off;
        proxy_request_buffering off;
        proxy_cache off;

        proxy_socket_keepalive on;

        proxy_redirect off;
    }

    location / {
#         limit_req zone=api burst=5000 nodelay;
        try_files $uri $uri/ @nest_backend;
    }

    location @nest_backend {
        limit_req zone=api burst=3000 nodelay;

        proxy_pass http://nest_backend;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_buffering on;
        proxy_buffer_size 64k;
        proxy_buffers 16 64k;
        proxy_busy_buffers_size 128k;

        proxy_cache off;
        proxy_no_cache 1;
        proxy_cache_bypass 1;

        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }

    location = /nginx_health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain always;
        add_header Cache-Control "no-cache" always;
    }

    location /v1/auth/login {
        limit_req zone=login burst=5 nodelay;
        limit_req zone=api burst=100 nodelay;

        # Направляем auth запросы на NestJS backend
        proxy_pass http://nest_backend;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_buffering on;
        proxy_buffer_size 64k;
        proxy_buffers 16 64k;
        proxy_busy_buffers_size 128k;

        proxy_cache off;
        proxy_no_cache 1;
        proxy_cache_bypass 1;

        # Переопределяем CORS заголовки из NestJS
        proxy_hide_header Access-Control-Allow-Origin;
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Credentials true always;
    }

    location ~* \.(aspx|jsp|cgi)$ {
        return 444;
    }

    if ($http_user_agent ~* "(?:acunetix|baiduspider|nikto|sqlmap|fimap|nessus|whatweb|Openvas)") {
        return 444;
    }
}

map $request_uri $loggable {
    ~/nginx_health 0;
    ~/socket.io.*transport=polling 0;
    ~*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ 0;
    default 1;
}