gzip_static on;

# Upstream конфигурации с обработкой недоступности серверов
upstream node_backend {
    least_conn;

    # Агрессивное кеширование соединений
    keepalive 500;
    keepalive_requests 100000;
    keepalive_timeout 60s;

    # Основной сервер с более мягкими настройками для запуска
    server split_trip_node:3000 max_fails=3 fail_timeout=10s weight=10 max_conns=2000;

    # Backup сервер (возвращает 503 если основной недоступен)
    server 127.0.0.1:65535 backup;
}

upstream php_backend {
    least_conn;

    # Увеличенные keepalive соединения для PHP
    keepalive 200;
    keepalive_requests 2000;
    keepalive_timeout 60s;

    # Увеличенные настройки для нагрузочного тестирования
    server split_trip_swoole:8080 max_fails=5 fail_timeout=5s weight=10 max_conns=3000;

    # Backup сервер для PHP
    server 127.0.0.1:65535 backup;
}

# Агрессивное кеширование для статики и API
proxy_cache_path /tmp/nginx_cache levels=1:2:2 keys_zone=static_cache:500m inactive=2h max_size=5g loader_threshold=300 loader_files=200;
proxy_cache_path /tmp/nginx_api_cache levels=1:2 keys_zone=api_cache:100m inactive=15m max_size=1g;


# Кеширование на уровне приложения
map $request_uri $cacheable_uri {
    ~^/api/public/ 1;
    ~^/public/ 1;
    ~\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|json)$ 1;
    default 0;
}

server {
    listen 80 reuseport deferred so_keepalive=on;
    server_name way-pay.net;

    # Экстремальные оптимизации для высокой нагрузки
    tcp_nodelay on;
    tcp_nopush on;
    sendfile on;
    sendfile_max_chunk 2m;

    # Увеличенная буферизация
    client_body_buffer_size 512k;
    client_max_body_size 100m;
    client_header_buffer_size 8k;
    large_client_header_buffers 8 32k;

    # Агрессивные таймауты для быстрого освобождения соединений
    client_body_timeout 8s;
    client_header_timeout 8s;
    send_timeout 8s;
    keepalive_timeout 65s;
    keepalive_requests 10000;

    # Connection limiting - увеличенные лимиты для нагрузочного тестирования
    limit_conn perip 5000;
    limit_conn perserver 20000;

    # Отключение логирования для статики (настройка access_log уже в nginx.conf)
    error_log /var/log/nginx/error.log error;

    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Кеширование статических файлов с экстремально долгим TTL
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        access_log off;

        # Проверка существования файла в памяти
        try_files $uri =404;

        # Агрессивное кеширование
        expires 1y;
        add_header Cache-Control "public, immutable" always;
        add_header Vary Accept-Encoding always;

        # Предварительная компрессия
        gzip_static on;

        # Rate limiting для статики
        limit_req zone=static burst=1000 nodelay;

        # Отключение ETag для статики с длинным кешем
        etag off;
    }

    # JSON API с кешированием
    location ~* \.json$ {
        # Кеширование API ответов
        proxy_cache api_cache;
        proxy_cache_valid 200 302 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_key "$request_method$host$request_uri";

        expires 5m;
        add_header Cache-Control "public" always;
        add_header Content-Type application/json always;
        add_header X-Cache-Status $upstream_cache_status always;

        limit_req zone=api burst=500 nodelay;

        try_files $uri =404;
    }

    # Well-known файлы с агрессивным кешированием
    location ~ ^/\.well-known/(apple-app-site-association|assetlinks\.json)$ {
        access_log off;

        # Кеширование в памяти nginx
        proxy_cache static_cache;
        proxy_cache_valid 200 6h;
        proxy_cache_key "$request_uri";

        try_files $uri =404;
        default_type application/json;

        # Экстремальное кеширование
        expires 6h;
        add_header Cache-Control "public, immutable" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Cache-Status $upstream_cache_status always;

        limit_req zone=api burst=100 nodelay;
    }

    # WebSocket/Socket.IO с максимальными оптимизациями
    location /socket.io/ {
        # Минимальное логирование
        access_log off;
        error_log /var/log/nginx/socket_error.log error;

        # Rate limiting для websocket
        limit_req zone=socket burst=500 nodelay;

        # Proxy к Node.js кластеру с sticky sessions
        proxy_pass http://node_backend;

        # Оптимизированные заголовки для WebSocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Минимальные таймауты для быстрого переключения
        proxy_connect_timeout 3s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Отключение буферизации для realtime
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_cache off;

        # Кеширование соединений к upstream
        proxy_socket_keepalive on;

        # Дополнительные оптимизации для WebSocket
        proxy_redirect off;
    }

    # API endpoints с отключенным кешированием для актуальных данных
    location /v1/ {
        # Добавляем заголовки, запрещающие кеширование
        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        limit_req zone=api burst=5000 nodelay;

        try_files $uri $uri/ @php_app;
    }

    root /var/www/html/public;
    index index.php;

    # Основное приложение с кешированием
    location / {
        limit_req zone=api burst=5000 nodelay;
        try_files $uri $uri/ @php_app;
    }

    # Optimized PHP-FPM backend
    location @php_app {
        # Proxy к Swoole HTTP серверу вместо FastCGI
        proxy_pass http://php_backend;

        # HTTP proxy заголовки
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Оптимизации для Swoole
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Буферизация для производительности
        proxy_buffering on;
        proxy_buffer_size 32k;
        proxy_buffers 32 32k;
        proxy_busy_buffers_size 64k;

        # Условное кеширование - отключаем для API запросов (/v1/ и /api/)
        set $no_cache 0;
        if ($uri ~ ^/(v1|api)/) {
            set $no_cache 1;
        }

        # Кеширование только для не-API запросов
        proxy_cache static_cache;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 301 1h;
        proxy_cache_valid any 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
        proxy_no_cache $no_cache;
        proxy_cache_bypass $no_cache;

        # Добавляем заголовки для API запросов (/v1/ и /api/)
        if ($uri ~ ^/(v1|api)/) {
            add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        add_header X-Proxy-Cache $upstream_cache_status always;
    }

    # Прямые PHP файлы - также через proxy для Swoole
    location ~ \.php$ {
        try_files $uri =404;

        # Proxy к Swoole вместо FastCGI
        proxy_pass http://php_backend;

        # HTTP proxy заголовки
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Оптимизации
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_buffering on;
        proxy_buffer_size 32k;
        proxy_buffers 32 32k;
    }

    # Публичные файлы с экстремальным кешированием
    location /public {
        access_log off;

        expires 30d;
        add_header Cache-Control "public, immutable" always;

        # Отключение auth для публичных файлов
        auth_basic off;

        limit_req zone=static burst=2000 nodelay;
    }

    # Безопасность - блокировка системных файлов
    location ~ /\.|~$ {
        deny all;
        access_log off;
        log_not_found off;
        return 444;
    }

    # Optimized health check
    location = /nginx_health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain always;
        add_header Cache-Control "no-cache" always;
    }

    # PHP-FPM status monitoring
    location ~ ^/(fpm-status|fpm-ping)$ {
        access_log off;
        include fastcgi_params;
        fastcgi_pass php_backend;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }

    # Логин эндпоинт с жестким rate limiting
    location /login {
        limit_req zone=login burst=5 nodelay;
        limit_req zone=api burst=100 nodelay;

        try_files $uri $uri/ @php_app;
    }

    # Блокировка вредоносных запросов
    location ~* \.(aspx|jsp|cgi)$ {
        return 444;
    }

    # Блокировка подозрительных User-Agent
    if ($http_user_agent ~* "(?:acunetix|baiduspider|nikto|sqlmap|fimap|nessus|whatweb|Openvas)") {
        return 444;
    }
}

# Переменные для условного логирования (оптимизация производительности)
map $request_uri $loggable {
    ~/nginx_health 0;
    ~/socket.io.*transport=polling 0;
    ~*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ 0;
    default 1;
}