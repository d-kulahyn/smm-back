  version: '3.8'

services:

  split_trip_web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: split_trip_web
    volumes:
      - ${APP_PATH_HOST}:${APP_PATH_CONTAINER}
    ports:
      - ${WEB_PORT}:80
      - ${WEB_SECURE_PORT}:443
    networks:
      - split_trip
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      split_trip_node:
        condition: service_healthy
      split_trip_nest:
        condition: service_healthy
      split_trip_redis:
        condition: service_healthy
      split_trip_mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '4.0'
        reservations:
          memory: 256M
          cpus: '1.0'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/nginx_health"]
      interval: 30s
      timeout: 10s
      retries: 3

  split_trip_node:
    build:
      context: ../socket-server
      dockerfile: Dockerfile
    container_name: split_trip_node
    volumes:
      - ../socket-server:/app
    ports:
      - ${NODE_PORT:-3000}:3000
    networks:
      - split_trip
    environment:
      - NODE_ENV=production
      - REDIS_HOST=split_trip_redis
      - REDIS_PORT=6379
      - UV_THREADPOOL_SIZE=8
      - NODE_OPTIONS=--max-old-space-size=1024
    depends_on:
      split_trip_redis:
        condition: service_healthy
      split_trip_mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || wget -q --spider http://localhost:3000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 45s

  split_trip_redis:
    image: redis:7-alpine
    container_name: split_trip_redis
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - split_trip
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --tcp-keepalive 60
      --timeout 300
      --databases 16
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  split_trip_mongodb:
    image: mongo:7.0
    container_name: split_trip_mongodb
    restart: unless-stopped
    ports:
      - ${MONGODB_PORT:-27017}:27017
    networks:
      - split_trip
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-smm_chat}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  split_trip_db_pg:
    build:
      context: ./pg
      dockerfile: Dockerfile
    container_name: split_trip_db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: smm
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./database_pg:/var/lib/postgresql/data/pgdata
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - split_trip
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '6.0'
        reservations:
          memory: 2G
          cpus: '3.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 5

  split_trip_nest:
    build:
      context: ../nest
      dockerfile: ../docker/nest/Dockerfile
    container_name: split_trip_nest
    ports:
      - ${NEST_PORT:-3001}:3001
    networks:
      - split_trip
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@split_trip_db_pg:5432/${POSTGRES_DATABASE}
      - MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@split_trip_mongodb:27017/${MONGODB_DATABASE}?authSource=admin
      - REDIS_HOST=split_trip_redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - PORT=3001
      - NODE_OPTIONS=--max-old-space-size=1024
    depends_on:
      split_trip_redis:
        condition: service_healthy
      split_trip_db_pg:
        condition: service_healthy
      split_trip_mongodb:
        condition: service_healthy
    volumes:
      # Монтируем исходный код для hot reload
      - ../nest/src:/app/src
      - ../nest/prisma:/app/prisma
      # Конфигурационные файлы
      - ../nest/package.json:/app/package.json:ro
      - ../nest/package-lock.json:/app/package-lock.json:ro
      - ../nest/tsconfig.json:/app/tsconfig.json:ro
      - ../nest/nest-cli.json:/app/nest-cli.json:ro
      # Исключаем node_modules из монтирования
      - /app/node_modules
      # Монтируем uploads для сохранения файлов
      - nest_uploads:/app/uploads
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '4.0'
        reservations:
          memory: 1G
          cpus: '2.0'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:3001/v1/health || curl -f http://localhost:3001/v1/health || wget --no-verbose --tries=1 --spider http://127.0.0.1:3001/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  nest_uploads:
    driver: local

networks:
  split_trip:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
