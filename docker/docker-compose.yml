version: '3.8'

services:

  split_trip_web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: split_trip_web
    volumes:
      - ${APP_PATH_HOST}:${APP_PATH_CONTAINER}
    ports:
      - ${WEB_PORT}:80
      - ${WEB_SECURE_PORT}:443
    networks:
      - split_trip
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      split_trip_fpm:
        condition: service_healthy
      split_trip_node:
        condition: service_healthy
      split_trip_redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/nginx_health"]
      interval: 30s
      timeout: 10s
      retries: 3

  split_trip_fpm:
    build:
      context: ./fpm
      dockerfile: Dockerfile
    container_name: split_trip_fpm
    volumes:
      - ${APP_PATH_HOST}:${APP_PATH_CONTAINER}
    ports:
      - ${FPM_PORT}:9000
    networks:
      - split_trip
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    environment:
      - PHP_MEMORY_LIMIT=512M
      - PHP_MAX_EXECUTION_TIME=60
      - PHP_OPCACHE_ENABLE=1
      - PHP_OPCACHE_MEMORY_CONSUMPTION=128
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 30s
      timeout: 10s
      retries: 3

  split_trip_node:
    build:
      context: ../socket-server
      dockerfile: ../docker/node/Dockerfile
    container_name: split_trip_node
    volumes:
      - ../socket-server:/app
    ports:
      - ${NODE_PORT:-3000}:3000
    networks:
      - split_trip
    environment:
      - NODE_ENV=production
      - REDIS_HOST=split_trip_redis
      - REDIS_PORT=6379
      - UV_THREADPOOL_SIZE=8
      - NODE_OPTIONS=--max-old-space-size=1024
    depends_on:
      split_trip_redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || wget -q --spider http://localhost:3000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 45s

  split_trip_redis:
    image: redis:7-alpine
    container_name: split_trip_redis
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - split_trip
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --tcp-keepalive 60
      --timeout 300
      --databases 16
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  split_trip_db_pg:
    build:
      context: ./pg
      dockerfile: Dockerfile
    container_name: split_trip_db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 16MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
    volumes:
      - ./database_pg:/var/lib/postgresql/data/pgdata
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - split_trip
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  redis_data:
    driver: local

networks:
  split_trip:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
